apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.lobstr.stellar.vault"
        minSdkVersion 22
        targetSdkVersion 29
        versionCode 18
        versionName "1.3.3"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/proguard/okhttp3.pro'
    }

    lintOptions {
        disable 'RestrictedApi'
        disable 'MissingTranslation'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    signingConfigs {
        qa {
            Properties keyProps = new Properties()
            keyProps.load(new FileInputStream(file('../local.properties')))
            storeFile file(keyProps["debug.store.path"])
            keyAlias keyProps["debug.key.alias"]
            storePassword keyProps["debug.store.password"]
            keyPassword keyProps["debug.key.password"]
        }
        vault {
            Properties keyProps = new Properties()
            keyProps.load(new FileInputStream(file('../local.properties')))
            storeFile file(keyProps["release.store.path"])
            keyAlias keyProps["release.key.alias"]
            storePassword keyProps["release.store.password"]
            keyPassword keyProps["release.key.password"]
        }
    }

    flavorDimensions "mode"
    productFlavors {
        qa {
            applicationId "com.lobstr.stellar.vault.qa"
            resValue "string", "app_name", "QA Vault"
            resValue "string", "authority", "public.shared.data.preference.qa"
            ext {
                apkName = [debug: "LOBSTR_Vault_qa_staging", release: "LOBSTR_Vault_qa_prod"]
            }
        }
        vault {
            applicationId "com.lobstr.stellar.vault"
            resValue "string", "app_name", "LOBSTR Vault"
            resValue "string", "authority", "public.shared.data.preference"
            ext {
                apkName = [debug: "LOBSTR_Vault_staging", release: "LOBSTR_Vault_market"]
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.qa
            debuggable true
            buildConfigField "boolean", "isDEBUG", "true"
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.vault
            debuggable false
            buildConfigField "boolean", "isDEBUG", "false"
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                generateApkName(variant)
            }
        }
    }
}

static def generateApkName(variant) {
    variant.outputs.all { output ->
        def date = new Date().format('dd.MM.yyyy')
        def apkName = variant.productFlavors[0].ext.apkName[variant.buildType.name]
        def fullApkName = apkName + "_" + variant.versionName + "(" + variant.versionCode + ")" + "_" + date + ".apk"
        output.outputFileName = new File(output.outputFile.name, fullApkName)
    }
}

ext {
    dagger = '2.27'
    rx_java = "2.2.4"
    rx_android = "2.1.0"
    rx_kotlin = "2.3.0"
    retrofit = '2.8.1'
    okhttp = '4.4.1'
    moxy = "2.1.2"
    leakcanary = "1.5.4"
    joda_time = "2.10.5"
    glide = '4.11.0'
    flexbox = "2.0.0"
    pin = "2.1.0"
    material = "1.1.0"
    browser = "1.2.0"
    firebase_messaging = '20.1.4'
    firebase_core = '17.3.0'
    firebase_crashlytics = "17.0.0-beta03"
    javax_annotation = "10.0-b28"
    androidx_core = '1.2.0'
    androidx_appcompat = "1.1.0"
    androidx_multidex = "2.0.1"
    androidx_preference = "1.1.0"
    androidx_constraintlayout = "1.1.3"
    androidx_legacy_support_v4 = "1.0.0"
    junit = '4.13'
    runner = "1.2.0"
    espresso_core = "3.2.0"
    stellar_sdk = "0.15.0"
    work_manager = '2.3.4'
    biometric = '1.0.1'
    lottieVersion = '3.4.0'
    qr_gen = "2.6.0"
    viewpager2 = "1.0.0"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test:runner:$runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"

    // Stellar
    implementation "com.github.stellar:java-stellar-sdk:$stellar_sdk"

    // Android
    implementation "androidx.core:core-ktx:$androidx_core"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat"
    implementation "androidx.multidex:multidex:$androidx_multidex"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraintlayout"
    implementation "androidx.legacy:legacy-support-v4:$androidx_legacy_support_v4"
    implementation "androidx.preference:preference-ktx:$androidx_preference"
    implementation "com.google.android:flexbox:$flexbox"
    implementation "com.google.android.material:material:$material"
    implementation "androidx.browser:browser:$browser"
    implementation "androidx.work:work-runtime-ktx:$work_manager"
    implementation "androidx.biometric:biometric:$biometric"
    implementation "androidx.viewpager2:viewpager2:$viewpager2"

    //Dagger 2 dependencies
    implementation "com.google.dagger:dagger:$dagger"
    kapt "com.google.dagger:dagger-compiler:$dagger"
    compileOnly "org.glassfish:javax.annotation:$javax_annotation"

    //Rx dependencies
    implementation "io.reactivex.rxjava2:rxjava:$rx_java"
    implementation "io.reactivex.rxjava2:rxandroid:$rx_android"
    implementation "io.reactivex.rxjava2:rxkotlin:$rx_kotlin"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp"

    //Moxy
    implementation "com.github.moxy-community:moxy:$moxy"
    kapt "com.github.moxy-community:moxy-compiler:$moxy"

    //Leakcanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakcanary"

    //Date converters
    implementation "joda-time:joda-time:$joda_time"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glide"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glide"
    kapt "com.github.bumptech.glide:compiler:$glide"

    //Firebase
    implementation "com.google.firebase:firebase-messaging:$firebase_messaging"
    implementation "com.google.firebase:firebase-core:$firebase_core"
    implementation "com.google.firebase:firebase-crashlytics:$firebase_crashlytics"

    //Other
    implementation "com.andrognito.pinlockview:pinlockview:$pin"
    implementation "com.airbnb.android:lottie:$lottieVersion"
    implementation "com.github.kenglxn.QRGen:android:$qr_gen"
}
androidExtensions {
    experimental = true
}

kapt {
    generateStubs = true
}
